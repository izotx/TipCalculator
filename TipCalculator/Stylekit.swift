//
//  Stylekit.swift
//  TipCalculator
//
//  Created by Janusz Chudzynski on 2/22/15.
//  Copyright (c) 2015 Janusz Chudzynski. All rights reserved.
//

import Foundation
//
//  SpeedometerStyleKit.swift
//  RunnerApp
//
//  Created by Janusz Chudzynski on 2/22/15.
//  Copyright (c) 2015 izotx.com. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit


public class TipView:UIView{
    var tipStartingAngle:CGFloat = 0
    var tipEndingAngle:CGFloat = 15
    
    var totalStartingAngle:CGFloat = 15
    var totalEndingAngle:CGFloat = 0
    
    
    var tipEngine:TipEngine = TipEngine() {
        didSet {
           
             tipEndingAngle = CGFloat(360.0 * tipEngine.tipAmount/tipEngine.total)
             totalStartingAngle = tipEndingAngle
            if(tipEngine.tipPercentage == 0){
                tipEndingAngle = 0.1
                totalStartingAngle = 0.1
                totalEndingAngle = 0
            }
            
             self.setNeedsDisplay()
        }
    }
    
    
    public override func awakeFromNib() {
        super.awakeFromNib()
        self.backgroundColor = UIColor.clearColor()
    }

    
    public override func drawRect(rect: CGRect) {
        super.drawRect(rect)
        
        
        var tipText = "$\(TipEngine.getNiceText(tipEngine.updateTotals().tipAmount, precision: 2)!)"
        var totalText =  "$\(TipEngine.getNiceText(tipEngine.updateTotals().totalAmount, precision: 2)!)"
        
        var billText = String(format: "$%.0f", tipEngine.bill);
        
        SpeedometerStyleKit.drawSpeedometer(frame: rect, tipStartPositionAngle: tipStartingAngle, tipEndPositionAngle: tipEndingAngle, mainFrame: rect, topLabelText: tipText,
            bottomlabelText: totalText, totalStartPositionAngle: totalStartingAngle, totalStopPositionAngle: totalEndingAngle)
    }


}

//
//  SpeedometerStyleKit.swift
//  RunnerApp
//
//  Created by Janusz Chudzynski on 2/24/15.
//  Copyright (c) 2015 izotx.com. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class SpeedometerStyleKit : NSObject {
    
    //// Drawing Methods
    
    public class func drawSpeedometer(#frame: CGRect, tipStartPositionAngle: CGFloat, tipEndPositionAngle: CGFloat, mainFrame: CGRect, topLabelText: String, bottomlabelText: String, totalStartPositionAngle: CGFloat, totalStopPositionAngle: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()
        
        //// Color Declarations
        let gradientColor = UIColor(red: 0.359, green: 0.675, blue: 1.000, alpha: 1.000)
        let gradientColor4 = UIColor(red: 0.931, green: 0.331, blue: 0.331, alpha: 1.000)
        let shapeBaseColor = UIColor(red: 0.950, green: 0.950, blue: 0.950, alpha: 1.000)
        
        //// Variable Declarations
        let topLabelFontSize: CGFloat = mainFrame.size.height / 6.0
        
        
        //// Subframes
        let view_container: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.00000 + 0.5), frame.minY + floor(frame.height * 0.00000 + 0.5), floor(frame.width * 0.97561 + 0.5) - floor(frame.width * 0.00000 + 0.5), floor(frame.height * 0.98522 + 0.5) - floor(frame.height * 0.00000 + 0.5))
        
        
        //// view_container
        //// Group
        //// Oval 5 Drawing
        var oval5Rect = CGRectMake(view_container.minX + floor(view_container.width * 0.00000 + 0.5), view_container.minY + floor(view_container.height * 0.00000 + 0.5), floor(view_container.width * 1.00000 + 0.5) - floor(view_container.width * 0.00000 + 0.5), floor(view_container.height * 1.00000 + 0.5) - floor(view_container.height * 0.00000 + 0.5))
        var oval5Path = UIBezierPath()
        oval5Path.addArcWithCenter(CGPointMake(oval5Rect.midX, oval5Rect.midY), radius: oval5Rect.width / 2, startAngle: -totalStartPositionAngle * CGFloat(M_PI)/180, endAngle: -totalStopPositionAngle * CGFloat(M_PI)/180, clockwise: true)
        oval5Path.addLineToPoint(CGPointMake(oval5Rect.midX, oval5Rect.midY))
        oval5Path.closePath()
        
        gradientColor.setFill()
        oval5Path.fill()
        UIColor.whiteColor().setStroke()
        oval5Path.lineWidth = 1
        oval5Path.stroke()
        
        
        //// Oval 3 Drawing
        var oval3Rect = CGRectMake(view_container.minX + floor(view_container.width * 0.00000 + 0.5), view_container.minY + floor(view_container.height * 0.00000 + 0.5), floor(view_container.width * 1.00000 + 0.5) - floor(view_container.width * 0.00000 + 0.5), floor(view_container.height * 1.00000 + 0.5) - floor(view_container.height * 0.00000 + 0.5))
        var oval3Path = UIBezierPath()
        oval3Path.addArcWithCenter(CGPointMake(oval3Rect.midX, oval3Rect.midY), radius: oval3Rect.width / 2, startAngle: -tipStartPositionAngle * CGFloat(M_PI)/180, endAngle: -tipEndPositionAngle * CGFloat(M_PI)/180, clockwise: true)
        oval3Path.addLineToPoint(CGPointMake(oval3Rect.midX, oval3Rect.midY))
        oval3Path.closePath()
        
        gradientColor4.setFill()
        oval3Path.fill()
        UIColor.whiteColor().setStroke()
        oval3Path.lineWidth = 1
        oval3Path.stroke()
        
        
        //// Oval 4 Drawing
        var oval4Path = UIBezierPath(ovalInRect: CGRectMake(view_container.minX + floor(view_container.width * 0.03500 + 0.5), view_container.minY + floor(view_container.height * 0.03500 + 0.5), floor(view_container.width * 0.96500 + 0.5) - floor(view_container.width * 0.03500 + 0.5), floor(view_container.height * 0.96500 + 0.5) - floor(view_container.height * 0.03500 + 0.5)))
        shapeBaseColor.setFill()
        oval4Path.fill()
        UIColor.whiteColor().setStroke()
        oval4Path.lineWidth = 1
        oval4Path.stroke()
        
        
        
        
        //// tipPlaceholder Drawing
        let tipPlaceholderRect = CGRectMake(view_container.minX + floor(view_container.width * 0.06500 + 0.5), view_container.minY + floor(view_container.height * 0.30500 + 0.5), floor(view_container.width * 0.92000 + 0.5) - floor(view_container.width * 0.06500 + 0.5), floor(view_container.height * 0.50000 + 0.5) - floor(view_container.height * 0.30500 + 0.5))
        let tipPlaceholderStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        tipPlaceholderStyle.alignment = NSTextAlignment.Center
        
        let tipPlaceholderFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: topLabelFontSize)!, NSForegroundColorAttributeName: gradientColor4, NSParagraphStyleAttributeName: tipPlaceholderStyle]
        
        NSString(string: topLabelText).drawInRect(tipPlaceholderRect, withAttributes: tipPlaceholderFontAttributes)
        
        
        //// tipLabel Drawing
        let tipLabelRect = CGRectMake(view_container.minX + floor(view_container.width * 0.28500 + 0.5), view_container.minY + floor(view_container.height * 0.18500 + 0.5), floor(view_container.width * 0.71500 + 0.5) - floor(view_container.width * 0.28500 + 0.5), floor(view_container.height * 0.30500 + 0.5) - floor(view_container.height * 0.18500 + 0.5))
        var tipLabelTextContent = NSString(string: "Tip")
        let tipLabelStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        tipLabelStyle.alignment = NSTextAlignment.Center
        
        let tipLabelFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica-Bold", size: 17)!, NSForegroundColorAttributeName: gradientColor4, NSParagraphStyleAttributeName: tipLabelStyle]
        
        let tipLabelTextHeight: CGFloat = tipLabelTextContent.boundingRectWithSize(CGSizeMake(tipLabelRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: tipLabelFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, tipLabelRect);
        tipLabelTextContent.drawInRect(CGRectMake(tipLabelRect.minX, tipLabelRect.minY + tipLabelRect.height - tipLabelTextHeight, tipLabelRect.width, tipLabelTextHeight), withAttributes: tipLabelFontAttributes)
        CGContextRestoreGState(context)
        
        
        //// amountLabel Drawing
        let amountLabelRect = CGRectMake(view_container.minX + floor(view_container.width * 0.17000 + 0.5), view_container.minY + floor(view_container.height * 0.50000 + 0.5), floor(view_container.width * 0.83000 + 0.5) - floor(view_container.width * 0.17000 + 0.5), floor(view_container.height * 0.59500 + 0.5) - floor(view_container.height * 0.50000 + 0.5))
        var amountLabelTextContent = NSString(string: "Total")
        let amountLabelStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        amountLabelStyle.alignment = NSTextAlignment.Center
        
        let amountLabelFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica-Bold", size: 17)!, NSForegroundColorAttributeName: gradientColor, NSParagraphStyleAttributeName: amountLabelStyle]
        
        let amountLabelTextHeight: CGFloat = amountLabelTextContent.boundingRectWithSize(CGSizeMake(amountLabelRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: amountLabelFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, amountLabelRect);
        amountLabelTextContent.drawInRect(CGRectMake(amountLabelRect.minX, amountLabelRect.minY + amountLabelRect.height - amountLabelTextHeight, amountLabelRect.width, amountLabelTextHeight), withAttributes: amountLabelFontAttributes)
        CGContextRestoreGState(context)
        
        
        //// totalPlaceholder Drawing
        let totalPlaceholderRect = CGRectMake(view_container.minX + floor(view_container.width * 0.07500 + 0.5), view_container.minY + floor(view_container.height * 0.59000 + 0.5), floor(view_container.width * 0.92500 + 0.5) - floor(view_container.width * 0.07500 + 0.5), floor(view_container.height * 0.78500 + 0.5) - floor(view_container.height * 0.59000 + 0.5))
        let totalPlaceholderStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        totalPlaceholderStyle.alignment = NSTextAlignment.Center
        
        let totalPlaceholderFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: topLabelFontSize)!, NSForegroundColorAttributeName: gradientColor, NSParagraphStyleAttributeName: totalPlaceholderStyle]
        
        NSString(string: bottomlabelText).drawInRect(totalPlaceholderRect, withAttributes: totalPlaceholderFontAttributes)
    }
    
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
